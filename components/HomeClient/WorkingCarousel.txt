"use client";

import Image from "next/image";
import { useMemo, useState, useEffect, useCallback } from "react";
import { motion, type Variants } from "framer-motion";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import useEmblaCarousel from "embla-carousel-react";
import { GalleriesByTab } from "@/lib/galleries";

/* ------------------ Data ------------------ */
type CardItem = { id: string; title: string; image: string };
type TabKey = "floorPlans" | "amenities" | "elevation";

/* ------------------ Animations ------------------ */
const fadeUp: Variants = {
  hidden: { opacity: 0, y: 40 },
  show: {
    opacity: 1,
    y: 0,
    transition: { duration: 0.6, ease: [0.22, 1, 0.36, 1] },
  },
};

const staggerContainer: Variants = {
  hidden: {},
  show: {
    transition: { staggerChildren: 0.1, delayChildren: 0.1 },
  },
};

/* ------------------ Component ------------------ */
export default function AmenitiesCarousel({ initialData }: { initialData: GalleriesByTab }) {
  const [tab, setTab] = useState<TabKey>("amenities");
  
  // Seed from server data
  const [dataByTab, setDataByTab] = useState<GalleriesByTab>(initialData);
  const items = useMemo(() => dataByTab[tab], [dataByTab, tab]);

  // Embla setup with conditional looping based on slide count
  const [emblaRef, emblaApi] = useEmblaCarousel({
    loop: items.length > 3, // Only enable loop if we have more than 3 items
    align: "start",
    slidesToScroll: 1,
    containScroll: "trimSnaps",
    dragFree: false,
    skipSnaps: false,
    duration: 25,
  });

  const [prevBtnEnabled, setPrevBtnEnabled] = useState(false);
  const [nextBtnEnabled, setNextBtnEnabled] = useState(false);
  const [isPlaying, setIsPlaying] = useState(true);

  const onSelect = useCallback(() => {
    if (!emblaApi) return;
    setPrevBtnEnabled(emblaApi.canScrollPrev());
    setNextBtnEnabled(emblaApi.canScrollNext());
  }, [emblaApi]);

  useEffect(() => {
    if (!emblaApi) return;
    emblaApi.on("select", onSelect);
    emblaApi.on("reInit", onSelect);
    onSelect();
    return () => {
      emblaApi.off("select", onSelect);
    };
  }, [emblaApi, onSelect]);

  // Re-init when tab items change
  useEffect(() => {
    emblaApi?.reInit();
  }, [emblaApi, items.length, tab]);

  // Improved autoplay with better handling of looping
  useEffect(() => {
    if (!emblaApi || !isPlaying || items.length <= 3) return;
    
    const id = setInterval(() => {
      if (emblaApi.canScrollNext()) {
        emblaApi.scrollNext();
      } else {
        // Only loop if we have enough slides
        if (items.length > 3) {
          emblaApi.scrollTo(0);
        }
      }
    }, 4000); // Slightly longer interval for better UX
    
    return () => clearInterval(id);
  }, [emblaApi, isPlaying, items.length]);

  const handleMouseEnter = () => setIsPlaying(false);
  const handleMouseLeave = () => setIsPlaying(true);

  const scrollPrev = useCallback(() => emblaApi?.scrollPrev(), [emblaApi]);
  const scrollNext = useCallback(() => emblaApi?.scrollNext(), [emblaApi]);

  return (
    <section id="amenities" className="bg-white relative overflow-hidden">
      {/* container: fluid on mobile, capped at 1542px */}
      <div className="mx-auto w-full max-w-[1542px] px-3 sm:px-4">
        <motion.div
          className="mx-auto w-full max-w-[1400px] px-0 py-12 sm:py-16 lg:py-20"
          initial="hidden"
          whileInView="show"
          viewport={{ once: true, amount: 0.25 }}
          variants={staggerContainer}
        >
          {/* Heading */}
          <motion.header className="text-center" variants={fadeUp}>
            <h2
              className="font-semibold text-[#10410f] tracking-tight"
              style={{ fontSize: "clamp(22px, 3.2vw, 38px)" }}
            >
              AMENITIES AT 27 PALAZZO
            </h2>
          </motion.header>

          {/* Tabs */}
          <motion.div
            className="mt-8 sm:mt-10 flex flex-wrap justify-center gap-3 sm:gap-4"
            variants={fadeUp}
          >
            <TabButton active={tab === "floorPlans"} onClick={() => setTab("floorPlans")}>
              FLOOR PLANS
            </TabButton>
            <TabButton active={tab === "amenities"} onClick={() => setTab("amenities")}>
              AMENITIES
            </TabButton>
            <TabButton active={tab === "elevation"} onClick={() => setTab("elevation")}>
              ELEVATION
            </TabButton>
          </motion.div>

          {/* Carousel (Embla) */}
          <motion.div
            className="relative mt-8 sm:mt-12 lg:mt-16 mb-10 sm:mb-0"
            variants={fadeUp}
            onMouseEnter={handleMouseEnter}
            onMouseLeave={handleMouseLeave}
            onTouchStart={() => setIsPlaying(false)}
            onTouchEnd={() => setIsPlaying(true)}
          >
            {/* Viewport frame: space for arrows */}
            <div className="relative overflow-visible px-1 sm:px-12 lg:px-16 z-1">
              {/* Arrows on top layer; pointer-events-safe */}
              <div className="pointer-events-none">
                <button
                  type="button"
                  aria-label="Previous"
                  onClick={scrollPrev}
                  disabled={!prevBtnEnabled}
                  className={cn(
                    "absolute -bottom-12 right-1/2 -translate-x-1/2 sm:translate-x-0 sm:left-3 sm:top-1/2 sm:-translate-y-1/2 z-70 pointer-events-auto",
                    "h-9 w-9 sm:h-10 sm:w-10 md:h-11 md:w-11 rounded-md text-white text-xl sm:text-2xl",
                    "bg-[linear-gradient(180deg,#e2a22b_0%,#f1c35a_60%,#e09a1e_100%)]",
                    "shadow-[0_6px_16px_rgba(0,0,0,0.15)] hover:brightness-[1.02] active:scale-95",
                    "flex items-center justify-center cursor-pointer disabled:opacity-60 disabled:cursor-not-allowed"
                  )}
                >
                  ‹
                </button>

                <button
                  type="button"
                  aria-label="Next"
                  onClick={scrollNext}
                  disabled={!nextBtnEnabled}
                  className={cn(
                    "absolute -bottom-12 left-1/2 -translate-x-1/2 sm:translate-x-0 sm:left-auto sm:right-3 sm:top-1/2 sm:-translate-y-1/2 z-70 pointer-events-auto ml-[10%]",
                    "h-9 w-9 sm:h-10 sm:w-10 md:h-11 md:w-11 rounded-[6px] text-white text-xl sm:text-2xl",
                    "bg-[linear-gradient(180deg,#e2a22b_0%,#f1c35a_60%,#e09a1e_100%)]",
                    "shadow-[0_6px_16px_rgba(0,0,0,0.15)] hover:brightness-[1.02] active:scale-95",
                    "flex items-center justify-center cursor-pointer disabled:opacity-60 disabled:cursor-not-allowed"
                  )}
                >
                  ›
                </button>
              </div>

              {/* Embla viewport */}
              <div className="overflow-hidden relative z-0 " ref={emblaRef}>
                {/* Embla container (flex, with responsive gaps) */}
                <div
                  className={cn(
                    "flex",
                    // hide scrollbar just in case
                    "[&::-webkit-scrollbar]:hidden [-ms-overflow-style:none] [scrollbar-width:none]"
                  )}
                >
                  {items.map((item) => (
                    <div
                      key={item.id}
                      // responsive slide widths (mirrors your previous grid breakpoints)
                      className="flex-[0_0_100%] sm:flex-[0_0_50%] lg:flex-[0_0_33.33%] min-w-0 px-4"
                      onTouchStart={() => setIsPlaying(false)}
                      onTouchEnd={() => setIsPlaying(true)}
                    >
                      <Card title={item.title} image={item.image} />
                    </div>
                  ))}
                </div>
              </div>
            </div>
          </motion.div>
        </motion.div>
      </div>
    </section>
  );
}

/* ---------------- Tab Button ---------------- */
function TabButton({
  active,
  onClick,
  children,
}: {
  active?: boolean;
  onClick: () => void;
  children: React.ReactNode;
}) {
  return (
    <Button
      onClick={onClick}
      variant="secondary"
      className={cn(
        "min-w-[150px] px-6 py-3 font-semibold tracking-wide text-sm rounded-xl transition-all duration-300",
        "bg-neutral-500 text-white ring-1 ring-black/10",
        "hover:bg-linear-to-b hover:from-[#F0B12B] hover:to-[#B47009] hover:text-white cursor-pointer",
        active &&
        "bg-linear-to-b from-[#F0B12B] to-[#B47009] text-white shadow-md scale-[1.03]"
      )}
    >
      {children}
    </Button>
  );
}

/* -------------- Card -------------- */
function Card({ title, image }: { title: string; image: string }) {
  return (
    <motion.article
      data-card="true"
      className="
        snap-start w-full mx-auto
        max-w-[440px] lg:max-w-none
        h-[492px]
        rounded-2xl bg-white p-3.5
        border border-[#a18050]
        group
      "
    >
      <div
        className="
          rounded-xl p-0.5 h-full
          bg-[linear-gradient(180deg,#f6d36a_0%,#e5b642_45%,#b67410_100%)]
        "
      >
        {/* Inner white container */}
        <div className="rounded-[12px] bg-white overflow-hidden h-full flex flex-col">
          {/* Image */}
          <div className="relative w-full flex-1 overflow-hidden">
            <Image
              src={image}
              alt={title}
              fill
              sizes="(min-width: 1024px) 33vw, 85vw"
              className="
                object-cover
                transition-transform duration-700 ease-out
                group-hover:scale-105
              "
              priority
            />
            {/* Title overlay */}
            <div className="absolute inset-x-0 bottom-4 flex justify-center px-4">
              <div
                className="
                  w-full max-w-[88%]
                  rounded-[10px]
                  text-center text-[18px] font-bold text-black
                  px-4 py-2
                  shadow-[0_6px_18px_rgba(0,0,0,0.15)] cursor-pointer
                "
                style={{
                  background:
                    "linear-gradient(90deg, rgba(232,129,4,1) 0%, rgba(244,209,112,1) 50%, rgba(232,129,4,1) 100%)",
                }}
              >
                {title}
              </div>
            </div>
          </div>
        </div>
      </div>
    </motion.article>
  );
}
